#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// nodo del árbol de Huffman
typedef struct Node {
    char character;
    int frequency;
    struct Node *left;
    struct Node *right;
} Node;

// cola de prioridad
typedef struct MinHeap {
    int size;
    int capacity;
    Node** array;
} MinHeap;

// crear un nodo
Node* createNode(char character, int frequency) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->character = character;
    newNode->frequency = frequency;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// crear una cola de prioridad
MinHeap* createMinHeap(int capacity) {
    MinHeap* minHeap = (MinHeap*)malloc(sizeof(MinHeap));
    minHeap->size = 0;
    minHeap->capacity = capacity;
    minHeap->array = (Node**)malloc(minHeap->capacity * sizeof(Node*));
    return minHeap;
}

// intercambiar dos nodos
void swapNodes(Node** a, Node** b) {
    Node* temp = *a;
    *a = *b;
    *b = temp;
}

// organizar la cola de prioridad (min-heap)
void minHeapify(MinHeap* minHeap, int idx) {
    int smallest = idx;
    int left = 2 * idx + 1;
    int right = 2 * idx + 2;

    if (left < minHeap->size && minHeap->array[left]->frequency < minHeap->array[smallest]->frequency)
        smallest = left;

    if (right < minHeap->size && minHeap->array[right]->frequency < minHeap->array[smallest]->frequency)
        smallest = right;

    if (smallest != idx) {
        swapNodes(&minHeap->array[smallest], &minHeap->array[idx]);
        minHeapify(minHeap, smallest);
    }
}

// construir la cola de prioridad
void buildMinHeap(MinHeap* minHeap) {
    int n = minHeap->size - 1;
    for (int i = (n - 1) / 2; i >= 0; i--) {
        minHeapify(minHeap, i);
    }
}

// extraer el nodo con la frecuencia más baja
Node* extractMin(MinHeap* minHeap) {
    Node* temp = minHeap->array[0];
    minHeap->array[0] = minHeap->array[minHeap->size - 1];
    --minHeap->size;
    minHeapify(minHeap, 0);
    return temp;
}

// insertar un nuevo nodo en la cola de prioridad
void insertMinHeap(MinHeap* minHeap, Node* node) {
    ++minHeap->size;
    int i = minHeap->size - 1;
    while (i && node->frequency < minHeap->array[(i - 1) / 2]->frequency) {
        minHeap->array[i] = minHeap->array[(i - 1) / 2];
        i = (i - 1) / 2;
    }
    minHeap->array[i] = node;
}

// construir el árbol de Huffman
Node* buildHuffmanTree(char* characters, int* frequencies, int size) {
    MinHeap* minHeap = createMinHeap(size);

    // Crear nodos de Huffman y agregarlos a la cola de prioridad
    for (int i = 0; i < size; ++i) {
        minHeap->array[i] = createNode(characters[i], frequencies[i]);
    }
    minHeap->size = size;
    buildMinHeap(minHeap);

    // Crear el árbol de Huffman
    while (minHeap->size > 1) {
        Node* left = extractMin(minHeap);
        Node* right = extractMin(minHeap);

        Node* top = createNode('$', left->frequency + right->frequency);
        top->left = left;
        top->right = right;

        insertMinHeap(minHeap, top);
    }

    return extractMin(minHeap);
}

// generar los códigos de Huffman
void printHuffmanCodes(Node* root, char* code, int length) {
    if (root == NULL)
        return;

    // Si el nodo es una hoja, imprimir el código
    if (root->character != '$') {
        printf("%c: %s\n", root->character, code);
        return;
    }

    // Recursión para el subárbol izquierdo (agregar '0')
    code[length] = '0';
    printHuffmanCodes(root->left, code, length + 1);

    // Recursión para el subárbol derecho (agregar '1')
    code[length] = '1';
    printHuffmanCodes(root->right, code, length + 1);
}

int main() {
    char characters[] = {'a', 'b', 'c', 'd', 'e', 'f'};
    int frequencies[] = {12, 2, 7, 13, 14, 85};
    int size = sizeof(frequencies) / sizeof(frequencies[0]);

    // Construir el árbol de Huffman
    Node* root = buildHuffmanTree(characters, frequencies, size);

    // Generar y mostrar los códigos de Huffman
    char code[100];
    printHuffmanCodes(root, code, 0);

    return 0;
}
